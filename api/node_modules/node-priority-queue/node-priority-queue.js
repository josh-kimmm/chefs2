/**
 * Priority queue
 *
 */

var exports = module.exports = {};

/**
 * API
 */

// Creates an empty array
exports.createEmptyQueue = function () {
    heap = [];
};

// Creates a heap from given input array
exports.setInputArray = function (inputArray) {
    heap = inputArray;
};

exports.addElement = function (element) {
    heap.push(element);
};

exports.setPropertyToPrioritize = function (propertyName, sortingOrder) {
    property = propertyName;
    order = sortingOrder;
};

exports.getQueue = function (input) {
    if(input) addAll(heap, input);
    else if(queue) addAll(heap, queue);
    return getResultQueue();
};

exports.peek = function () {
    return queue[0];
};

exports.pop = function () {
    if(queue.length > 0) {
        var element = queue[0];
        queue.shift();
        return element;
    } else {
        return null;
    }
};

/**
 * Implementation
 */
var heap;
var property;
var order;
var top = 0;
var queue = null;

function getParent(i) {
    return Math.floor(i / 2);
}

function getRightChild(i) {
    return Math.floor((2*i) + 1);
}

function getLeftChild(i) {
    return Math.floor(2 * i);
}

function ascendingOrder(a, b) {
    return a < b;
}

function descendingOrder(a, b) {
    return a > b;
}

function swap(a, b) {
    var temp = heap[a];
    heap[a] = heap[b];
    heap[b] = temp;
}

function getResultQueue() {
    queue = [];
    for(var i = heap.length - 1; i >= 0; i--) {
        heapifyUtil(property, order);
        queue.push(heap[0]);
        swap(0, i);
        heap.pop();
    }
    heap = [];
    return queue;
}

function addAll(destination, source) {
    source.forEach(function (item) {
        destination.push(item);
    });
}

function heapify(rootIndex, property, order) {

    var left = getLeftChild(rootIndex);
    var right = getRightChild(rootIndex);
    var temp;
    if(left < heap.length &&  order(heap[left][property], heap[rootIndex][property])) {
        temp = left;
    } else {
        temp = rootIndex;
    }
    if(right < heap.length && order(heap[right][property], heap[rootIndex][property])) {
        temp = right;
    }
    if(temp != rootIndex) {
        swap(temp, rootIndex);
        heapify(temp, property, order);
    }

}

function heapifyUtil(property, order) {
    if(order === 1) {
        for(var i = Math.floor(heap.length / 2); i >= 0; i--)
            heapify(i, property, ascendingOrder);
    } else if(order === -1) {
        for(var i = Math.floor(heap.length / 2); i >= 0; i--)
            heapify(i, property, descendingOrder);
    }
}