UserProfile.find().log()
User.find().log()
User.find().log()
User.find().log()
User.find().log()
User.find().log()
U
User.create({email: 'sjt', password: '123456'})}))
User.create({email: 'sjt', password: '123456'})
User.find().log()
User.find().log()
User.create({email: 'sjt', password: '123456'}).log()
clear
User.create({email: 'sjt@ucsd.edu', password: '123456', firstName: 'harry', lastName: 'sjt'}).log()'
User.create({})
User.c
User.create({email: 'sjt', password: '123456', firstName: 'first', lastName: 'last'}).log()
User.find().log()
User.find().limit(1).log()
User.findOne().limit(1).log()
User.find().limit(1).log()
User.find().log()User.find().limit(1).log()
User.find().limit(1).log()
User.find().log9)
User.find().log()
User.find({email: 'sjt'}).log()
clear
User.find().log()
User.find().log()User.find()[1].log9)
clear
User.find()[1].log()
User.find({
}).log()
User.find({email: 'sjt'}).log()
User.find().log()
sails --help
User.remove()
User.destroy()
User.destroy()User.find().log()
User.find().log()
User.destroy().log()
User.destroy({}).log()
User.find().log()
sails generate model User
sails generate model User
sails generate model User
sails destroy model User
sails generate Review
User.find().log()
User.create({})
User.create({}).log()
User.find().log()
User.destroy({}).log())
User.destroy({}).log()
User.find().log()
User.find().log()
UserProfile.create({}).log()
UserProfile.find().log()
UserProfile.destroy({}).log()
UserProfile.find().log()
User.find().log()
User.create({userProfile: 1, email: 'e1', password: '123', firstName='Harry', lastName='Potter'}).log()
User.create({userProfile: 1, email: 'e1', password: '123', firstName: 'Harry', lastName: 'Potter'}).log()
User.find().log()
User.find({userId:1}).log()
User.find({userId: 2}).log()
User.find().log()
UserProfile.find().log()
UserProfile.create({user: 2}).log()
UserProfile.find().log()
UserProfile.destroy({}).log()
User.find().log()
UserProfile.create({user: 2}).log()
UserProfile.find().log()
User.update({}).set({userProfile: 4}).log()
User.find().log()
UserProfile.find().log()
User.find().populate('userProfile').log()
User.find().populate('userProfile').log()
User.find().populate('userProfile').log()
User.find({}).populate('userProfile', {}).log()
User.find().log()
UserProfile.find().log()
UserProfile.find().populate('user').log()
User.find().populate('userProfile').log()
User.find().log()
User.find().populate().log()
User.find().populate('userprofile').log()
User.find().populate('userProfile').log()
User.find().log()
UserProfile.find().log()
User.find().populate('userProfile').log()
User.find().log()
User.create({userProfile: 1}).log()
User.find().log()
UserProfile.create({user: 1}).log()
UserProfile.find().log()
User.find().log()
User.find().populate('userProfile').log()
User.find().populate('userProfile').log()
User.find().populate('userProfile').log()
User.find().log9)
User.find().log()
User.find().populate('userProfile').log()
User.find().populate('userProfile').log()
User.find().log()
User.create({email: 'e1', password: '123', firstName: 'harry', lastName: 'potter'}).log()
User.find().log()
UserProfile.create({user: 1}).log()
UserProfile.find().log()
User.find().populate('userProfile').log()
Ingredient.create({'ngredientName: 'onion'}).log()'
Ingredient.create({ingredientName: 'onion'}).log()
Ingredient.create({ingredientName: 'beef'}).log()
Ingredient.find().log()
UserProfile.addToCollection(1, 'ingredientPreference', [1,2]}).log()
UserProfile.addToCollection(1, 'ingredientPreference').members([1,2]).log()
User.find().populate('userProfile').log()
UserProfile.find().log()
UserProfile.find().populate('ingredientPreference').log()
UserProfile.find().log()
UserProfile.find().populate('reviews').log()
User.find().populate('userProfile').log()
User.find().populateAll()
User.find().populateAll().log()
User.find().limit(1).populateAll()
User.find().limit(1).populateAll().log()
User.find().limit(1).populate('userProfile').populate('ingredientPreference').log()
UserProfile.findOne().log()
UserProfile.find().limit(1).populateAll().log()
User.find().limit(1).populateAll().log()
User.find().log()
User.create({email: 'e2', password: '234', firstName: 'tom', lastName: 'voldemort'}).log()
User.find().log()
User.find({id: 1}).log()
Recipe.create({dietType: 'fast meal', prepTime: '10min', cookingMethod: 'fry', userProfile=[1,2]}).log()
Recipe.find().log()
Recipe.create({dietType: 'fast meal', prepTime: '10 min', cookingMethod: 'fry'}).log()
Recipe.find().log()
Recipe.addToCollection(1, 'userProfile').member([2]).log()
Recipe.addToCollection(1, 'userProfile').members([2]).log()
Recipe.addToCollection(1, 'ingredients').members([1,2]).log()
Recipe.find().log()
Recipe.find().populateAll().log()
Recipe.addToCollection(1, 'userProfile').members([2]).log()
Recipe.find().log()
    updatedAt: 1541723635281,
Recipe.find().populateAll().log()
UserProfile.find().log9)
UserProfile.find().log()
User.find().log9)
User.find().log()
UserProfile.create({user: 2}).log()
UserProfile.create({user: 2}).log()Recipe.find().populateAll().log9)
Recipe.find().populateAll().log()
Recipe.find().log()
Recipe.create({dietType: 'lunch', prepTime: '30 min', cookingMethod: 'oven', rating: 4}).log()
Recipe.find().log()
Recipe.create({dietType: 'lunch', prepTime: '30 5min', cookingMethod: 'oveteam',n', rating: 4}).log()
Recipe.create({dietType: 'lunch', prepTime: '45 min', cookingMethod: 'steam', rating: 4}).log()
Recipe.find().populateAll().log()
Recipe.find().log()
Recipe.find().log9)
Recipe.find().log()
Recipe.findRecipeById(1).log()
Recipe.findAllRecipe().log()
Recipe.f(1).log()
Recipe.find().limit(1).log()
Recipe.find().limit(1).f(1).log()
User.findOne({}).log()
Recipe.findOne({id: 1}).log()
Recipe.find().length.log()
Recipe.find().log()
Recipe.findOne({id:1}).populateAll().log()
Recipe.find().populateAll().log()
Recipe.findByRId(1).log()
User.find().log()
User.find({firstName: 'tom'}).log()
User.find({firstName:{'contains': 'to'},}).log()
Recipe.find().log()
Recipe.find().log()Recipe.find().populateAll().log()
Recipe.find().populateAll().log()
User.find({'contains':'t'}).log()
Recipe.find().log()
Recipe.find().populate('ingredient').log()
Recipe.find().populate('ingredients').log()
Recipe.populate('ingredients').find().log()
Recipe.find().populate('ingredients').find({ingredients: {ingredientName: 'beef'}}).log()
Ingredient.find().log()
Ingredient.find({ingredientName: 'beef'}).log()
Ingredient.find({ingredientName: {'contains': 'be'}}).log()
Ingredient.find({ingredientName: {'contains': 'bf'}}).log()
Recipe.find({'ingredients': {'contains': 2}}).log()
Recipe.find().log()
Recipe.findOne({}).log()
Recipe.find().log()
Recipe.find().where({ingredients: 2}).log()
Recipe.find().where({ingredients: {in: [2,]}}).log()
Recipe.find().populateAll().log()
Recipe.find().limit(1).log()
 Recipe.find().limit(1).log()
 Recipe.find().limit(1).ingredients.log()
Recipe.find().populateAll().log()
Recipe.find().where({ingredients: {contains: 2}}).log()
Recipe.find().populate('ingredients').log()
Recipe.find().populate('ingredients').log()
Recipe.find().populate('ingredients').find().log()
Recipe.find().populate('ingredients').exec(
function(err, li) { if (err) return [];
var list = [];
for (var i = 0; i < li.length; i++) {
list.push(li[i].id)ngredientName;}
Recipe.find().populate('ingredients').exec(function(err, list) {
var li = [];
if (err) return li;
for (int i = 0; i < list.length; i++) {
Recipe.find().populate('ingredients').exec(function(err, list) {
var li = [];
if (err) return li;
for (var i = 0; i < list.length; i++) {
li.push(list[i]);
}
return li;
}).log()
Recipe.find().populate('ingredients').log()
Recipe.find().populate('ingredients').ingredients.log()
Recipe.find().populate('ingredients')['ingredients'].log()
Recipe.find().populate('ingredients')['i
var li = [1,2]
li
1 in li
var l2 = 2
2 in l2
li
l2
l2 = [l2]
l2
2 in l2
l2
2 in l2
2 in li
li
var t = 2
t in l2
l2
t
var set = new Set(li)
set
1 in set
set
set.has(1)
set.has(t)
Ingredient.find({ingredientName: {contains: 'beef'}}).log()
li
var li = [1,2,3]
li
li.map(x=>x+1)
li
Recipes.find().populate('ingredients').log()
Recipes.find().populate('ingredients').log()
Recipe.find().populate('ingredients').log()
